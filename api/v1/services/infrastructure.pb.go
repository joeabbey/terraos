// Code generated by protoc-gen-gogo. DO NOT EDIT.
// source: github.com/stellarproject/terraos/api/v1/services/infrastructure.proto

package services

import (
	context "context"
	fmt "fmt"
	proto "github.com/gogo/protobuf/proto"
	types1 "github.com/gogo/protobuf/types"
	types "github.com/stellarproject/terraos/api/v1/types"
	grpc "google.golang.org/grpc"
	io "io"
	math "math"
	reflect "reflect"
	strings "strings"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.GoGoProtoPackageIsVersion2 // please upgrade the proto package

type ProvisionNodeRequest struct {
	Node                 *types.Node `protobuf:"bytes,1,opt,name=node,proto3" json:"node,omitempty"`
	XXX_NoUnkeyedLiteral struct{}    `json:"-"`
	XXX_unrecognized     []byte      `json:"-"`
	XXX_sizecache        int32       `json:"-"`
}

func (m *ProvisionNodeRequest) Reset()      { *m = ProvisionNodeRequest{} }
func (*ProvisionNodeRequest) ProtoMessage() {}
func (*ProvisionNodeRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_c1a5ce8b13a97981, []int{0}
}
func (m *ProvisionNodeRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *ProvisionNodeRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_ProvisionNodeRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalTo(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *ProvisionNodeRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_ProvisionNodeRequest.Merge(m, src)
}
func (m *ProvisionNodeRequest) XXX_Size() int {
	return m.Size()
}
func (m *ProvisionNodeRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_ProvisionNodeRequest.DiscardUnknown(m)
}

var xxx_messageInfo_ProvisionNodeRequest proto.InternalMessageInfo

type ProvisionNodeResponse struct {
	Node                 *types.Node `protobuf:"bytes,1,opt,name=node,proto3" json:"node,omitempty"`
	XXX_NoUnkeyedLiteral struct{}    `json:"-"`
	XXX_unrecognized     []byte      `json:"-"`
	XXX_sizecache        int32       `json:"-"`
}

func (m *ProvisionNodeResponse) Reset()      { *m = ProvisionNodeResponse{} }
func (*ProvisionNodeResponse) ProtoMessage() {}
func (*ProvisionNodeResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_c1a5ce8b13a97981, []int{1}
}
func (m *ProvisionNodeResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *ProvisionNodeResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_ProvisionNodeResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalTo(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *ProvisionNodeResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_ProvisionNodeResponse.Merge(m, src)
}
func (m *ProvisionNodeResponse) XXX_Size() int {
	return m.Size()
}
func (m *ProvisionNodeResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_ProvisionNodeResponse.DiscardUnknown(m)
}

var xxx_messageInfo_ProvisionNodeResponse proto.InternalMessageInfo

type ListNodeResponse struct {
	Nodes                []*types.Node `protobuf:"bytes,1,rep,name=nodes,proto3" json:"nodes,omitempty"`
	XXX_NoUnkeyedLiteral struct{}      `json:"-"`
	XXX_unrecognized     []byte        `json:"-"`
	XXX_sizecache        int32         `json:"-"`
}

func (m *ListNodeResponse) Reset()      { *m = ListNodeResponse{} }
func (*ListNodeResponse) ProtoMessage() {}
func (*ListNodeResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_c1a5ce8b13a97981, []int{2}
}
func (m *ListNodeResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *ListNodeResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_ListNodeResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalTo(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *ListNodeResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_ListNodeResponse.Merge(m, src)
}
func (m *ListNodeResponse) XXX_Size() int {
	return m.Size()
}
func (m *ListNodeResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_ListNodeResponse.DiscardUnknown(m)
}

var xxx_messageInfo_ListNodeResponse proto.InternalMessageInfo

type InstallPXERequest struct {
	Image                string   `protobuf:"bytes,1,opt,name=image,proto3" json:"image,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *InstallPXERequest) Reset()      { *m = InstallPXERequest{} }
func (*InstallPXERequest) ProtoMessage() {}
func (*InstallPXERequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_c1a5ce8b13a97981, []int{3}
}
func (m *InstallPXERequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *InstallPXERequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_InstallPXERequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalTo(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *InstallPXERequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_InstallPXERequest.Merge(m, src)
}
func (m *InstallPXERequest) XXX_Size() int {
	return m.Size()
}
func (m *InstallPXERequest) XXX_DiscardUnknown() {
	xxx_messageInfo_InstallPXERequest.DiscardUnknown(m)
}

var xxx_messageInfo_InstallPXERequest proto.InternalMessageInfo

type DeleteNodeRequest struct {
	Hostname             string   `protobuf:"bytes,1,opt,name=hostname,proto3" json:"hostname,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *DeleteNodeRequest) Reset()      { *m = DeleteNodeRequest{} }
func (*DeleteNodeRequest) ProtoMessage() {}
func (*DeleteNodeRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_c1a5ce8b13a97981, []int{4}
}
func (m *DeleteNodeRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *DeleteNodeRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_DeleteNodeRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalTo(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *DeleteNodeRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_DeleteNodeRequest.Merge(m, src)
}
func (m *DeleteNodeRequest) XXX_Size() int {
	return m.Size()
}
func (m *DeleteNodeRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_DeleteNodeRequest.DiscardUnknown(m)
}

var xxx_messageInfo_DeleteNodeRequest proto.InternalMessageInfo

type InfoResponse struct {
	PxeVersion           string   `protobuf:"bytes,1,opt,name=pxe_version,json=pxeVersion,proto3" json:"pxe_version,omitempty"`
	Gateway              string   `protobuf:"bytes,2,opt,name=gateway,proto3" json:"gateway,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *InfoResponse) Reset()      { *m = InfoResponse{} }
func (*InfoResponse) ProtoMessage() {}
func (*InfoResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_c1a5ce8b13a97981, []int{5}
}
func (m *InfoResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *InfoResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_InfoResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalTo(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *InfoResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_InfoResponse.Merge(m, src)
}
func (m *InfoResponse) XXX_Size() int {
	return m.Size()
}
func (m *InfoResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_InfoResponse.DiscardUnknown(m)
}

var xxx_messageInfo_InfoResponse proto.InternalMessageInfo

func init() {
	proto.RegisterType((*ProvisionNodeRequest)(nil), "io.stellarproject.services.v1.ProvisionNodeRequest")
	proto.RegisterType((*ProvisionNodeResponse)(nil), "io.stellarproject.services.v1.ProvisionNodeResponse")
	proto.RegisterType((*ListNodeResponse)(nil), "io.stellarproject.services.v1.ListNodeResponse")
	proto.RegisterType((*InstallPXERequest)(nil), "io.stellarproject.services.v1.InstallPXERequest")
	proto.RegisterType((*DeleteNodeRequest)(nil), "io.stellarproject.services.v1.DeleteNodeRequest")
	proto.RegisterType((*InfoResponse)(nil), "io.stellarproject.services.v1.InfoResponse")
}

func init() {
	proto.RegisterFile("github.com/stellarproject/terraos/api/v1/services/infrastructure.proto", fileDescriptor_c1a5ce8b13a97981)
}

var fileDescriptor_c1a5ce8b13a97981 = []byte{
	// 470 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0x9c, 0x54, 0xc1, 0x6e, 0xd3, 0x40,
	0x10, 0x8d, 0x69, 0x5a, 0xe8, 0x14, 0x21, 0x6a, 0x05, 0x14, 0x19, 0x61, 0x22, 0x9f, 0x40, 0x48,
	0xbb, 0xa4, 0xad, 0x38, 0x94, 0x1b, 0xa2, 0x48, 0x81, 0x02, 0x55, 0x84, 0xaa, 0x8a, 0x0b, 0xda,
	0xa4, 0x13, 0x77, 0x91, 0xe3, 0x59, 0x76, 0xd7, 0xa6, 0xb9, 0xf1, 0x79, 0x3d, 0x22, 0x4e, 0x1c,
	0x69, 0xbe, 0x04, 0xd9, 0x1b, 0xa7, 0x84, 0x10, 0xd2, 0x72, 0x89, 0x76, 0x32, 0xf3, 0x9e, 0xde,
	0xcc, 0x7b, 0x32, 0xbc, 0x8c, 0xa5, 0x3d, 0xc9, 0x7a, 0xac, 0x4f, 0x43, 0x6e, 0x2c, 0x26, 0x89,
	0xd0, 0x4a, 0xd3, 0x27, 0xec, 0x5b, 0x6e, 0x51, 0x6b, 0x41, 0x86, 0x0b, 0x25, 0x79, 0xde, 0xe6,
	0x06, 0x75, 0x2e, 0xfb, 0x68, 0xb8, 0x4c, 0x07, 0x5a, 0x18, 0xab, 0xb3, 0xbe, 0xcd, 0x34, 0x32,
	0xa5, 0xc9, 0x92, 0x7f, 0x5f, 0x12, 0x9b, 0xc5, 0xb3, 0x0a, 0xc0, 0xf2, 0x76, 0xd0, 0x88, 0x29,
	0xa6, 0x72, 0x92, 0x17, 0x2f, 0x07, 0x0a, 0xee, 0xc5, 0x44, 0x71, 0x82, 0xbc, 0xac, 0x7a, 0xd9,
	0x80, 0xe3, 0x50, 0xd9, 0xd1, 0xa4, 0xb9, 0x7b, 0x69, 0x65, 0x76, 0xa4, 0xd0, 0xb8, 0x5f, 0x87,
	0x8d, 0xf6, 0xa1, 0x71, 0xa0, 0x29, 0x97, 0x46, 0x52, 0xfa, 0x96, 0x8e, 0xb1, 0x8b, 0x9f, 0x33,
	0x34, 0xd6, 0xdf, 0x81, 0x7a, 0x4a, 0xc7, 0xd8, 0xf4, 0x5a, 0xde, 0xc3, 0x8d, 0xad, 0x16, 0x9b,
	0x17, 0xed, 0x58, 0xf2, 0x36, 0x2b, 0x61, 0xe5, 0x74, 0xf4, 0x06, 0xee, 0xfc, 0xc1, 0x66, 0x14,
	0xa5, 0x06, 0xff, 0x93, 0xee, 0x15, 0xdc, 0xde, 0x97, 0xc6, 0xce, 0x30, 0x3d, 0x85, 0xd5, 0xa2,
	0x67, 0x9a, 0x5e, 0x6b, 0xe5, 0x52, 0x54, 0x6e, 0x3c, 0x7a, 0x04, 0x9b, 0x9d, 0xd4, 0x58, 0x91,
	0x24, 0x07, 0x47, 0x7b, 0xd5, 0x96, 0x0d, 0x58, 0x95, 0x43, 0x11, 0x3b, 0x5d, 0xeb, 0x5d, 0x57,
	0x44, 0x1c, 0x36, 0x5f, 0x60, 0x82, 0x16, 0x7f, 0x3f, 0x48, 0x00, 0x37, 0x4e, 0xc8, 0xd8, 0x54,
	0x0c, 0xab, 0xe9, 0x69, 0x1d, 0x75, 0xe0, 0x66, 0x27, 0x1d, 0xd0, 0x54, 0xe3, 0x03, 0xd8, 0x50,
	0xa7, 0xf8, 0x31, 0x47, 0x5d, 0x1c, 0x62, 0x32, 0x0e, 0xea, 0x14, 0x0f, 0xdd, 0x3f, 0x7e, 0x13,
	0xae, 0xc7, 0xc2, 0xe2, 0x17, 0x31, 0x6a, 0x5e, 0x2b, 0x9b, 0x55, 0xb9, 0xf5, 0x7d, 0x05, 0x6e,
	0x75, 0x66, 0x62, 0xe3, 0xe7, 0xb0, 0x3e, 0x3d, 0xaa, 0xbf, 0xcd, 0xfe, 0x19, 0x1f, 0xf6, 0x37,
	0x33, 0x83, 0x9d, 0xab, 0x81, 0x26, 0x5b, 0xbc, 0x83, 0x7a, 0x71, 0x7d, 0xff, 0x2e, 0x73, 0xe1,
	0x63, 0x55, 0xf8, 0xd8, 0x5e, 0x11, 0xbe, 0x80, 0x2f, 0x61, 0x9d, 0xb3, 0xee, 0x10, 0xe0, 0xc2,
	0x02, 0xff, 0xc9, 0x12, 0xf8, 0x9c, 0x5b, 0xc1, 0x02, 0x21, 0x7e, 0x17, 0xd6, 0x9c, 0x5f, 0x4b,
	0x39, 0xe7, 0x6c, 0x5d, 0xc8, 0xf9, 0x1a, 0xea, 0x85, 0xa5, 0x0b, 0x97, 0x7f, 0xbc, 0x54, 0xfd,
	0x45, 0x1e, 0x9e, 0xbf, 0x3f, 0x3b, 0x0f, 0x6b, 0x3f, 0xce, 0xc3, 0xda, 0xd7, 0x71, 0xe8, 0x9d,
	0x8d, 0x43, 0xef, 0xdb, 0x38, 0xf4, 0x7e, 0x8e, 0x43, 0xef, 0xc3, 0xee, 0x95, 0x3f, 0x2a, 0xcf,
	0xaa, 0xc7, 0x51, 0xad, 0xb7, 0x56, 0x8a, 0xda, 0xfe, 0x15, 0x00, 0x00, 0xff, 0xff, 0xda, 0x9f,
	0x7c, 0xb3, 0x9b, 0x04, 0x00, 0x00,
}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConn

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion4

// InfrastructureClient is the client API for Infrastructure service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://godoc.org/google.golang.org/grpc#ClientConn.NewStream.
type InfrastructureClient interface {
	Provision(ctx context.Context, in *ProvisionNodeRequest, opts ...grpc.CallOption) (*ProvisionNodeResponse, error)
	List(ctx context.Context, in *types1.Empty, opts ...grpc.CallOption) (*ListNodeResponse, error)
	InstallPXE(ctx context.Context, in *InstallPXERequest, opts ...grpc.CallOption) (*types1.Empty, error)
	Delete(ctx context.Context, in *DeleteNodeRequest, opts ...grpc.CallOption) (*types1.Empty, error)
	Info(ctx context.Context, in *types1.Empty, opts ...grpc.CallOption) (*InfoResponse, error)
}

type infrastructureClient struct {
	cc *grpc.ClientConn
}

func NewInfrastructureClient(cc *grpc.ClientConn) InfrastructureClient {
	return &infrastructureClient{cc}
}

func (c *infrastructureClient) Provision(ctx context.Context, in *ProvisionNodeRequest, opts ...grpc.CallOption) (*ProvisionNodeResponse, error) {
	out := new(ProvisionNodeResponse)
	err := c.cc.Invoke(ctx, "/io.stellarproject.services.v1.Infrastructure/Provision", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *infrastructureClient) List(ctx context.Context, in *types1.Empty, opts ...grpc.CallOption) (*ListNodeResponse, error) {
	out := new(ListNodeResponse)
	err := c.cc.Invoke(ctx, "/io.stellarproject.services.v1.Infrastructure/List", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *infrastructureClient) InstallPXE(ctx context.Context, in *InstallPXERequest, opts ...grpc.CallOption) (*types1.Empty, error) {
	out := new(types1.Empty)
	err := c.cc.Invoke(ctx, "/io.stellarproject.services.v1.Infrastructure/InstallPXE", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *infrastructureClient) Delete(ctx context.Context, in *DeleteNodeRequest, opts ...grpc.CallOption) (*types1.Empty, error) {
	out := new(types1.Empty)
	err := c.cc.Invoke(ctx, "/io.stellarproject.services.v1.Infrastructure/Delete", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *infrastructureClient) Info(ctx context.Context, in *types1.Empty, opts ...grpc.CallOption) (*InfoResponse, error) {
	out := new(InfoResponse)
	err := c.cc.Invoke(ctx, "/io.stellarproject.services.v1.Infrastructure/Info", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// InfrastructureServer is the server API for Infrastructure service.
type InfrastructureServer interface {
	Provision(context.Context, *ProvisionNodeRequest) (*ProvisionNodeResponse, error)
	List(context.Context, *types1.Empty) (*ListNodeResponse, error)
	InstallPXE(context.Context, *InstallPXERequest) (*types1.Empty, error)
	Delete(context.Context, *DeleteNodeRequest) (*types1.Empty, error)
	Info(context.Context, *types1.Empty) (*InfoResponse, error)
}

func RegisterInfrastructureServer(s *grpc.Server, srv InfrastructureServer) {
	s.RegisterService(&_Infrastructure_serviceDesc, srv)
}

func _Infrastructure_Provision_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ProvisionNodeRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(InfrastructureServer).Provision(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/io.stellarproject.services.v1.Infrastructure/Provision",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(InfrastructureServer).Provision(ctx, req.(*ProvisionNodeRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Infrastructure_List_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(types1.Empty)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(InfrastructureServer).List(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/io.stellarproject.services.v1.Infrastructure/List",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(InfrastructureServer).List(ctx, req.(*types1.Empty))
	}
	return interceptor(ctx, in, info, handler)
}

func _Infrastructure_InstallPXE_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(InstallPXERequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(InfrastructureServer).InstallPXE(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/io.stellarproject.services.v1.Infrastructure/InstallPXE",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(InfrastructureServer).InstallPXE(ctx, req.(*InstallPXERequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Infrastructure_Delete_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DeleteNodeRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(InfrastructureServer).Delete(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/io.stellarproject.services.v1.Infrastructure/Delete",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(InfrastructureServer).Delete(ctx, req.(*DeleteNodeRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Infrastructure_Info_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(types1.Empty)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(InfrastructureServer).Info(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/io.stellarproject.services.v1.Infrastructure/Info",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(InfrastructureServer).Info(ctx, req.(*types1.Empty))
	}
	return interceptor(ctx, in, info, handler)
}

var _Infrastructure_serviceDesc = grpc.ServiceDesc{
	ServiceName: "io.stellarproject.services.v1.Infrastructure",
	HandlerType: (*InfrastructureServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "Provision",
			Handler:    _Infrastructure_Provision_Handler,
		},
		{
			MethodName: "List",
			Handler:    _Infrastructure_List_Handler,
		},
		{
			MethodName: "InstallPXE",
			Handler:    _Infrastructure_InstallPXE_Handler,
		},
		{
			MethodName: "Delete",
			Handler:    _Infrastructure_Delete_Handler,
		},
		{
			MethodName: "Info",
			Handler:    _Infrastructure_Info_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "github.com/stellarproject/terraos/api/v1/services/infrastructure.proto",
}

func (m *ProvisionNodeRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *ProvisionNodeRequest) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.Node != nil {
		dAtA[i] = 0xa
		i++
		i = encodeVarintInfrastructure(dAtA, i, uint64(m.Node.Size()))
		n1, err := m.Node.MarshalTo(dAtA[i:])
		if err != nil {
			return 0, err
		}
		i += n1
	}
	if m.XXX_unrecognized != nil {
		i += copy(dAtA[i:], m.XXX_unrecognized)
	}
	return i, nil
}

func (m *ProvisionNodeResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *ProvisionNodeResponse) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.Node != nil {
		dAtA[i] = 0xa
		i++
		i = encodeVarintInfrastructure(dAtA, i, uint64(m.Node.Size()))
		n2, err := m.Node.MarshalTo(dAtA[i:])
		if err != nil {
			return 0, err
		}
		i += n2
	}
	if m.XXX_unrecognized != nil {
		i += copy(dAtA[i:], m.XXX_unrecognized)
	}
	return i, nil
}

func (m *ListNodeResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *ListNodeResponse) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if len(m.Nodes) > 0 {
		for _, msg := range m.Nodes {
			dAtA[i] = 0xa
			i++
			i = encodeVarintInfrastructure(dAtA, i, uint64(msg.Size()))
			n, err := msg.MarshalTo(dAtA[i:])
			if err != nil {
				return 0, err
			}
			i += n
		}
	}
	if m.XXX_unrecognized != nil {
		i += copy(dAtA[i:], m.XXX_unrecognized)
	}
	return i, nil
}

func (m *InstallPXERequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *InstallPXERequest) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if len(m.Image) > 0 {
		dAtA[i] = 0xa
		i++
		i = encodeVarintInfrastructure(dAtA, i, uint64(len(m.Image)))
		i += copy(dAtA[i:], m.Image)
	}
	if m.XXX_unrecognized != nil {
		i += copy(dAtA[i:], m.XXX_unrecognized)
	}
	return i, nil
}

func (m *DeleteNodeRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *DeleteNodeRequest) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if len(m.Hostname) > 0 {
		dAtA[i] = 0xa
		i++
		i = encodeVarintInfrastructure(dAtA, i, uint64(len(m.Hostname)))
		i += copy(dAtA[i:], m.Hostname)
	}
	if m.XXX_unrecognized != nil {
		i += copy(dAtA[i:], m.XXX_unrecognized)
	}
	return i, nil
}

func (m *InfoResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *InfoResponse) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if len(m.PxeVersion) > 0 {
		dAtA[i] = 0xa
		i++
		i = encodeVarintInfrastructure(dAtA, i, uint64(len(m.PxeVersion)))
		i += copy(dAtA[i:], m.PxeVersion)
	}
	if len(m.Gateway) > 0 {
		dAtA[i] = 0x12
		i++
		i = encodeVarintInfrastructure(dAtA, i, uint64(len(m.Gateway)))
		i += copy(dAtA[i:], m.Gateway)
	}
	if m.XXX_unrecognized != nil {
		i += copy(dAtA[i:], m.XXX_unrecognized)
	}
	return i, nil
}

func encodeVarintInfrastructure(dAtA []byte, offset int, v uint64) int {
	for v >= 1<<7 {
		dAtA[offset] = uint8(v&0x7f | 0x80)
		v >>= 7
		offset++
	}
	dAtA[offset] = uint8(v)
	return offset + 1
}
func (m *ProvisionNodeRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Node != nil {
		l = m.Node.Size()
		n += 1 + l + sovInfrastructure(uint64(l))
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *ProvisionNodeResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Node != nil {
		l = m.Node.Size()
		n += 1 + l + sovInfrastructure(uint64(l))
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *ListNodeResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if len(m.Nodes) > 0 {
		for _, e := range m.Nodes {
			l = e.Size()
			n += 1 + l + sovInfrastructure(uint64(l))
		}
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *InstallPXERequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.Image)
	if l > 0 {
		n += 1 + l + sovInfrastructure(uint64(l))
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *DeleteNodeRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.Hostname)
	if l > 0 {
		n += 1 + l + sovInfrastructure(uint64(l))
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *InfoResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.PxeVersion)
	if l > 0 {
		n += 1 + l + sovInfrastructure(uint64(l))
	}
	l = len(m.Gateway)
	if l > 0 {
		n += 1 + l + sovInfrastructure(uint64(l))
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func sovInfrastructure(x uint64) (n int) {
	for {
		n++
		x >>= 7
		if x == 0 {
			break
		}
	}
	return n
}
func sozInfrastructure(x uint64) (n int) {
	return sovInfrastructure(uint64((x << 1) ^ uint64((int64(x) >> 63))))
}
func (this *ProvisionNodeRequest) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&ProvisionNodeRequest{`,
		`Node:` + strings.Replace(fmt.Sprintf("%v", this.Node), "Node", "types.Node", 1) + `,`,
		`XXX_unrecognized:` + fmt.Sprintf("%v", this.XXX_unrecognized) + `,`,
		`}`,
	}, "")
	return s
}
func (this *ProvisionNodeResponse) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&ProvisionNodeResponse{`,
		`Node:` + strings.Replace(fmt.Sprintf("%v", this.Node), "Node", "types.Node", 1) + `,`,
		`XXX_unrecognized:` + fmt.Sprintf("%v", this.XXX_unrecognized) + `,`,
		`}`,
	}, "")
	return s
}
func (this *ListNodeResponse) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&ListNodeResponse{`,
		`Nodes:` + strings.Replace(fmt.Sprintf("%v", this.Nodes), "Node", "types.Node", 1) + `,`,
		`XXX_unrecognized:` + fmt.Sprintf("%v", this.XXX_unrecognized) + `,`,
		`}`,
	}, "")
	return s
}
func (this *InstallPXERequest) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&InstallPXERequest{`,
		`Image:` + fmt.Sprintf("%v", this.Image) + `,`,
		`XXX_unrecognized:` + fmt.Sprintf("%v", this.XXX_unrecognized) + `,`,
		`}`,
	}, "")
	return s
}
func (this *DeleteNodeRequest) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&DeleteNodeRequest{`,
		`Hostname:` + fmt.Sprintf("%v", this.Hostname) + `,`,
		`XXX_unrecognized:` + fmt.Sprintf("%v", this.XXX_unrecognized) + `,`,
		`}`,
	}, "")
	return s
}
func (this *InfoResponse) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&InfoResponse{`,
		`PxeVersion:` + fmt.Sprintf("%v", this.PxeVersion) + `,`,
		`Gateway:` + fmt.Sprintf("%v", this.Gateway) + `,`,
		`XXX_unrecognized:` + fmt.Sprintf("%v", this.XXX_unrecognized) + `,`,
		`}`,
	}, "")
	return s
}
func valueToStringInfrastructure(v interface{}) string {
	rv := reflect.ValueOf(v)
	if rv.IsNil() {
		return "nil"
	}
	pv := reflect.Indirect(rv).Interface()
	return fmt.Sprintf("*%v", pv)
}
func (m *ProvisionNodeRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowInfrastructure
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: ProvisionNodeRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: ProvisionNodeRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Node", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowInfrastructure
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthInfrastructure
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthInfrastructure
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Node == nil {
				m.Node = &types.Node{}
			}
			if err := m.Node.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipInfrastructure(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthInfrastructure
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthInfrastructure
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *ProvisionNodeResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowInfrastructure
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: ProvisionNodeResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: ProvisionNodeResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Node", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowInfrastructure
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthInfrastructure
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthInfrastructure
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Node == nil {
				m.Node = &types.Node{}
			}
			if err := m.Node.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipInfrastructure(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthInfrastructure
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthInfrastructure
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *ListNodeResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowInfrastructure
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: ListNodeResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: ListNodeResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Nodes", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowInfrastructure
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthInfrastructure
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthInfrastructure
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Nodes = append(m.Nodes, &types.Node{})
			if err := m.Nodes[len(m.Nodes)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipInfrastructure(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthInfrastructure
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthInfrastructure
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *InstallPXERequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowInfrastructure
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: InstallPXERequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: InstallPXERequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Image", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowInfrastructure
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthInfrastructure
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthInfrastructure
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Image = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipInfrastructure(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthInfrastructure
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthInfrastructure
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *DeleteNodeRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowInfrastructure
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: DeleteNodeRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: DeleteNodeRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Hostname", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowInfrastructure
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthInfrastructure
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthInfrastructure
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Hostname = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipInfrastructure(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthInfrastructure
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthInfrastructure
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *InfoResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowInfrastructure
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: InfoResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: InfoResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field PxeVersion", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowInfrastructure
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthInfrastructure
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthInfrastructure
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.PxeVersion = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Gateway", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowInfrastructure
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthInfrastructure
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthInfrastructure
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Gateway = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipInfrastructure(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthInfrastructure
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthInfrastructure
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func skipInfrastructure(dAtA []byte) (n int, err error) {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return 0, ErrIntOverflowInfrastructure
			}
			if iNdEx >= l {
				return 0, io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		wireType := int(wire & 0x7)
		switch wireType {
		case 0:
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowInfrastructure
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				iNdEx++
				if dAtA[iNdEx-1] < 0x80 {
					break
				}
			}
			return iNdEx, nil
		case 1:
			iNdEx += 8
			return iNdEx, nil
		case 2:
			var length int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowInfrastructure
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				length |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if length < 0 {
				return 0, ErrInvalidLengthInfrastructure
			}
			iNdEx += length
			if iNdEx < 0 {
				return 0, ErrInvalidLengthInfrastructure
			}
			return iNdEx, nil
		case 3:
			for {
				var innerWire uint64
				var start int = iNdEx
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return 0, ErrIntOverflowInfrastructure
					}
					if iNdEx >= l {
						return 0, io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					innerWire |= (uint64(b) & 0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				innerWireType := int(innerWire & 0x7)
				if innerWireType == 4 {
					break
				}
				next, err := skipInfrastructure(dAtA[start:])
				if err != nil {
					return 0, err
				}
				iNdEx = start + next
				if iNdEx < 0 {
					return 0, ErrInvalidLengthInfrastructure
				}
			}
			return iNdEx, nil
		case 4:
			return iNdEx, nil
		case 5:
			iNdEx += 4
			return iNdEx, nil
		default:
			return 0, fmt.Errorf("proto: illegal wireType %d", wireType)
		}
	}
	panic("unreachable")
}

var (
	ErrInvalidLengthInfrastructure = fmt.Errorf("proto: negative length found during unmarshaling")
	ErrIntOverflowInfrastructure   = fmt.Errorf("proto: integer overflow")
)

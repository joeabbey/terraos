// Code generated by protoc-gen-gogo. DO NOT EDIT.
// source: github.com/stellarproject/terraos/api/types/v1/machine.proto

package v1

import (
	fmt "fmt"
	proto "github.com/gogo/protobuf/proto"
	io "io"
	math "math"
	reflect "reflect"
	strings "strings"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.GoGoProtoPackageIsVersion2 // please upgrade the proto package

// Machine is a physical machine
type Machine struct {
	UUID                 string    `protobuf:"bytes,1,opt,name=uuid,proto3" json:"uuid,omitempty"`
	Cpus                 uint32    `protobuf:"varint,2,opt,name=cpus,proto3" json:"cpus,omitempty"`
	Memory               uint64    `protobuf:"varint,3,opt,name=memory,proto3" json:"memory,omitempty"`
	NetworkDevices       []*Netdev `protobuf:"bytes,4,rep,name=network_devices,json=networkDevices,proto3" json:"network_devices,omitempty"`
	XXX_NoUnkeyedLiteral struct{}  `json:"-"`
	XXX_unrecognized     []byte    `json:"-"`
	XXX_sizecache        int32     `json:"-"`
}

func (m *Machine) Reset()      { *m = Machine{} }
func (*Machine) ProtoMessage() {}
func (*Machine) Descriptor() ([]byte, []int) {
	return fileDescriptor_f060a4acd4faad8b, []int{0}
}
func (m *Machine) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *Machine) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_Machine.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalTo(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *Machine) XXX_Merge(src proto.Message) {
	xxx_messageInfo_Machine.Merge(m, src)
}
func (m *Machine) XXX_Size() int {
	return m.Size()
}
func (m *Machine) XXX_DiscardUnknown() {
	xxx_messageInfo_Machine.DiscardUnknown(m)
}

var xxx_messageInfo_Machine proto.InternalMessageInfo

// Netdev is a network device
type Netdev struct {
	Mac                  string   `protobuf:"bytes,1,opt,name=mac,proto3" json:"mac,omitempty"`
	Name                 string   `protobuf:"bytes,2,opt,name=name,proto3" json:"name,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *Netdev) Reset()      { *m = Netdev{} }
func (*Netdev) ProtoMessage() {}
func (*Netdev) Descriptor() ([]byte, []int) {
	return fileDescriptor_f060a4acd4faad8b, []int{1}
}
func (m *Netdev) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *Netdev) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_Netdev.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalTo(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *Netdev) XXX_Merge(src proto.Message) {
	xxx_messageInfo_Netdev.Merge(m, src)
}
func (m *Netdev) XXX_Size() int {
	return m.Size()
}
func (m *Netdev) XXX_DiscardUnknown() {
	xxx_messageInfo_Netdev.DiscardUnknown(m)
}

var xxx_messageInfo_Netdev proto.InternalMessageInfo

func init() {
	proto.RegisterType((*Machine)(nil), "io.stellarproject.types.v1.Machine")
	proto.RegisterType((*Netdev)(nil), "io.stellarproject.types.v1.Netdev")
}

func init() {
	proto.RegisterFile("github.com/stellarproject/terraos/api/types/v1/machine.proto", fileDescriptor_f060a4acd4faad8b)
}

var fileDescriptor_f060a4acd4faad8b = []byte{
	// 297 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0x94, 0x90, 0x3f, 0x4b, 0x3b, 0x31,
	0x18, 0x80, 0x9b, 0x5f, 0x8f, 0xfe, 0x6c, 0xc4, 0x3f, 0x04, 0x91, 0xa3, 0x48, 0x3c, 0x3a, 0xdd,
	0x94, 0x70, 0x3a, 0xea, 0x54, 0xba, 0x48, 0xd1, 0x21, 0x50, 0x10, 0x17, 0x49, 0xd3, 0x97, 0x36,
	0xda, 0x34, 0x47, 0x2e, 0x77, 0xd2, 0xcd, 0x8f, 0xe2, 0xc7, 0xe9, 0xe8, 0xe8, 0x24, 0xf6, 0x3e,
	0x89, 0x34, 0xd7, 0xc5, 0xc1, 0xc1, 0xed, 0x49, 0xf2, 0x3e, 0xe1, 0xe1, 0xc5, 0xd7, 0x33, 0xed,
	0xe7, 0xe5, 0x84, 0x29, 0x6b, 0x78, 0xe1, 0x61, 0xb1, 0x90, 0x2e, 0x77, 0xf6, 0x09, 0x94, 0xe7,
	0x1e, 0x9c, 0x93, 0xb6, 0xe0, 0x32, 0xd7, 0xdc, 0xaf, 0x72, 0x28, 0x78, 0x95, 0x71, 0x23, 0xd5,
	0x5c, 0x2f, 0x81, 0xe5, 0xce, 0x7a, 0x4b, 0x7a, 0xda, 0xb2, 0x9f, 0x16, 0x0b, 0x93, 0xac, 0xca,
	0x7a, 0x27, 0x33, 0x3b, 0xb3, 0x61, 0x8c, 0x6f, 0xa9, 0x31, 0xfa, 0x6f, 0x08, 0xff, 0xbf, 0x6d,
	0xfe, 0x20, 0x67, 0x38, 0x2a, 0x4b, 0x3d, 0x8d, 0x51, 0x82, 0xd2, 0xee, 0x60, 0xaf, 0xfe, 0x3c,
	0x8f, 0xc6, 0xe3, 0x9b, 0xa1, 0x08, 0xb7, 0x84, 0xe0, 0x48, 0xe5, 0x65, 0x11, 0xff, 0x4b, 0x50,
	0x7a, 0x20, 0x02, 0x93, 0x53, 0xdc, 0x31, 0x60, 0xac, 0x5b, 0xc5, 0xed, 0x04, 0xa5, 0x91, 0xd8,
	0x9d, 0xc8, 0x08, 0x1f, 0x2d, 0xc1, 0xbf, 0x58, 0xf7, 0xfc, 0x38, 0x85, 0x4a, 0x2b, 0x28, 0xe2,
	0x28, 0x69, 0xa7, 0xfb, 0x17, 0x7d, 0xf6, 0x7b, 0x21, 0xbb, 0x03, 0x3f, 0x85, 0x4a, 0x1c, 0xee,
	0xd4, 0x61, 0x63, 0xf6, 0x19, 0xee, 0x34, 0x2f, 0xe4, 0x18, 0xb7, 0x8d, 0x54, 0x4d, 0x9f, 0xd8,
	0xe2, 0x36, 0x6a, 0x29, 0x0d, 0x84, 0xa8, 0xae, 0x08, 0x3c, 0x18, 0xad, 0x37, 0xb4, 0xf5, 0xb1,
	0xa1, 0xad, 0xd7, 0x9a, 0xa2, 0x75, 0x4d, 0xd1, 0x7b, 0x4d, 0xd1, 0x57, 0x4d, 0xd1, 0x43, 0xf6,
	0xb7, 0xe5, 0x5e, 0x55, 0xd9, 0x7d, 0x6b, 0xd2, 0x09, 0x8b, 0xba, 0xfc, 0x0e, 0x00, 0x00, 0xff,
	0xff, 0x7b, 0x31, 0x57, 0x05, 0x9a, 0x01, 0x00, 0x00,
}

func (m *Machine) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *Machine) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if len(m.UUID) > 0 {
		dAtA[i] = 0xa
		i++
		i = encodeVarintMachine(dAtA, i, uint64(len(m.UUID)))
		i += copy(dAtA[i:], m.UUID)
	}
	if m.Cpus != 0 {
		dAtA[i] = 0x10
		i++
		i = encodeVarintMachine(dAtA, i, uint64(m.Cpus))
	}
	if m.Memory != 0 {
		dAtA[i] = 0x18
		i++
		i = encodeVarintMachine(dAtA, i, uint64(m.Memory))
	}
	if len(m.NetworkDevices) > 0 {
		for _, msg := range m.NetworkDevices {
			dAtA[i] = 0x22
			i++
			i = encodeVarintMachine(dAtA, i, uint64(msg.Size()))
			n, err := msg.MarshalTo(dAtA[i:])
			if err != nil {
				return 0, err
			}
			i += n
		}
	}
	if m.XXX_unrecognized != nil {
		i += copy(dAtA[i:], m.XXX_unrecognized)
	}
	return i, nil
}

func (m *Netdev) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *Netdev) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if len(m.Mac) > 0 {
		dAtA[i] = 0xa
		i++
		i = encodeVarintMachine(dAtA, i, uint64(len(m.Mac)))
		i += copy(dAtA[i:], m.Mac)
	}
	if len(m.Name) > 0 {
		dAtA[i] = 0x12
		i++
		i = encodeVarintMachine(dAtA, i, uint64(len(m.Name)))
		i += copy(dAtA[i:], m.Name)
	}
	if m.XXX_unrecognized != nil {
		i += copy(dAtA[i:], m.XXX_unrecognized)
	}
	return i, nil
}

func encodeVarintMachine(dAtA []byte, offset int, v uint64) int {
	for v >= 1<<7 {
		dAtA[offset] = uint8(v&0x7f | 0x80)
		v >>= 7
		offset++
	}
	dAtA[offset] = uint8(v)
	return offset + 1
}
func (m *Machine) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.UUID)
	if l > 0 {
		n += 1 + l + sovMachine(uint64(l))
	}
	if m.Cpus != 0 {
		n += 1 + sovMachine(uint64(m.Cpus))
	}
	if m.Memory != 0 {
		n += 1 + sovMachine(uint64(m.Memory))
	}
	if len(m.NetworkDevices) > 0 {
		for _, e := range m.NetworkDevices {
			l = e.Size()
			n += 1 + l + sovMachine(uint64(l))
		}
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *Netdev) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.Mac)
	if l > 0 {
		n += 1 + l + sovMachine(uint64(l))
	}
	l = len(m.Name)
	if l > 0 {
		n += 1 + l + sovMachine(uint64(l))
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func sovMachine(x uint64) (n int) {
	for {
		n++
		x >>= 7
		if x == 0 {
			break
		}
	}
	return n
}
func sozMachine(x uint64) (n int) {
	return sovMachine(uint64((x << 1) ^ uint64((int64(x) >> 63))))
}
func (this *Machine) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&Machine{`,
		`UUID:` + fmt.Sprintf("%v", this.UUID) + `,`,
		`Cpus:` + fmt.Sprintf("%v", this.Cpus) + `,`,
		`Memory:` + fmt.Sprintf("%v", this.Memory) + `,`,
		`NetworkDevices:` + strings.Replace(fmt.Sprintf("%v", this.NetworkDevices), "Netdev", "Netdev", 1) + `,`,
		`XXX_unrecognized:` + fmt.Sprintf("%v", this.XXX_unrecognized) + `,`,
		`}`,
	}, "")
	return s
}
func (this *Netdev) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&Netdev{`,
		`Mac:` + fmt.Sprintf("%v", this.Mac) + `,`,
		`Name:` + fmt.Sprintf("%v", this.Name) + `,`,
		`XXX_unrecognized:` + fmt.Sprintf("%v", this.XXX_unrecognized) + `,`,
		`}`,
	}, "")
	return s
}
func valueToStringMachine(v interface{}) string {
	rv := reflect.ValueOf(v)
	if rv.IsNil() {
		return "nil"
	}
	pv := reflect.Indirect(rv).Interface()
	return fmt.Sprintf("*%v", pv)
}
func (m *Machine) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowMachine
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: Machine: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: Machine: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field UUID", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMachine
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthMachine
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthMachine
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.UUID = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Cpus", wireType)
			}
			m.Cpus = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMachine
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Cpus |= uint32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Memory", wireType)
			}
			m.Memory = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMachine
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Memory |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field NetworkDevices", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMachine
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthMachine
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthMachine
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.NetworkDevices = append(m.NetworkDevices, &Netdev{})
			if err := m.NetworkDevices[len(m.NetworkDevices)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipMachine(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthMachine
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthMachine
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *Netdev) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowMachine
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: Netdev: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: Netdev: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Mac", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMachine
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthMachine
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthMachine
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Mac = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Name", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMachine
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthMachine
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthMachine
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Name = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipMachine(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthMachine
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthMachine
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func skipMachine(dAtA []byte) (n int, err error) {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return 0, ErrIntOverflowMachine
			}
			if iNdEx >= l {
				return 0, io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		wireType := int(wire & 0x7)
		switch wireType {
		case 0:
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowMachine
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				iNdEx++
				if dAtA[iNdEx-1] < 0x80 {
					break
				}
			}
			return iNdEx, nil
		case 1:
			iNdEx += 8
			return iNdEx, nil
		case 2:
			var length int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowMachine
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				length |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if length < 0 {
				return 0, ErrInvalidLengthMachine
			}
			iNdEx += length
			if iNdEx < 0 {
				return 0, ErrInvalidLengthMachine
			}
			return iNdEx, nil
		case 3:
			for {
				var innerWire uint64
				var start int = iNdEx
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return 0, ErrIntOverflowMachine
					}
					if iNdEx >= l {
						return 0, io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					innerWire |= (uint64(b) & 0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				innerWireType := int(innerWire & 0x7)
				if innerWireType == 4 {
					break
				}
				next, err := skipMachine(dAtA[start:])
				if err != nil {
					return 0, err
				}
				iNdEx = start + next
				if iNdEx < 0 {
					return 0, ErrInvalidLengthMachine
				}
			}
			return iNdEx, nil
		case 4:
			return iNdEx, nil
		case 5:
			iNdEx += 4
			return iNdEx, nil
		default:
			return 0, fmt.Errorf("proto: illegal wireType %d", wireType)
		}
	}
	panic("unreachable")
}

var (
	ErrInvalidLengthMachine = fmt.Errorf("proto: negative length found during unmarshaling")
	ErrIntOverflowMachine   = fmt.Errorf("proto: integer overflow")
)

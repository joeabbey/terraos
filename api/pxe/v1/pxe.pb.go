// Code generated by protoc-gen-gogo. DO NOT EDIT.
// source: github.com/stellarproject/terraos/api/pxe/v1/pxe.proto

package v1

import (
	context "context"
	fmt "fmt"
	proto "github.com/gogo/protobuf/proto"
	types "github.com/gogo/protobuf/types"
	grpc "google.golang.org/grpc"
	io "io"
	math "math"
	reflect "reflect"
	strings "strings"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.GoGoProtoPackageIsVersion2 // please upgrade the proto package

type InstallRequest struct {
	Loader               *Bootloader `protobuf:"bytes,1,opt,name=loader,proto3" json:"loader,omitempty"`
	Default              bool        `protobuf:"varint,2,opt,name=default,proto3" json:"default,omitempty"`
	XXX_NoUnkeyedLiteral struct{}    `json:"-"`
	XXX_unrecognized     []byte      `json:"-"`
	XXX_sizecache        int32       `json:"-"`
}

func (m *InstallRequest) Reset()      { *m = InstallRequest{} }
func (*InstallRequest) ProtoMessage() {}
func (*InstallRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_bae81a51a4b0840a, []int{0}
}
func (m *InstallRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *InstallRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_InstallRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalTo(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *InstallRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_InstallRequest.Merge(m, src)
}
func (m *InstallRequest) XXX_Size() int {
	return m.Size()
}
func (m *InstallRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_InstallRequest.DiscardUnknown(m)
}

var xxx_messageInfo_InstallRequest proto.InternalMessageInfo

type ListResponse struct {
	Bootloaders          []*Bootloader `protobuf:"bytes,1,rep,name=bootloaders,proto3" json:"bootloaders,omitempty"`
	XXX_NoUnkeyedLiteral struct{}      `json:"-"`
	XXX_unrecognized     []byte        `json:"-"`
	XXX_sizecache        int32         `json:"-"`
}

func (m *ListResponse) Reset()      { *m = ListResponse{} }
func (*ListResponse) ProtoMessage() {}
func (*ListResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_bae81a51a4b0840a, []int{1}
}
func (m *ListResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *ListResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_ListResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalTo(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *ListResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_ListResponse.Merge(m, src)
}
func (m *ListResponse) XXX_Size() int {
	return m.Size()
}
func (m *ListResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_ListResponse.DiscardUnknown(m)
}

var xxx_messageInfo_ListResponse proto.InternalMessageInfo

type RegisterRequest struct {
	Mac                  string      `protobuf:"bytes,1,opt,name=mac,proto3" json:"mac,omitempty"`
	Ip                   string      `protobuf:"bytes,2,opt,name=ip,proto3" json:"ip,omitempty"`
	Root                 string      `protobuf:"bytes,3,opt,name=root,proto3" json:"root,omitempty"`
	Boot                 string      `protobuf:"bytes,4,opt,name=boot,proto3" json:"boot,omitempty"`
	Iscsi                *ISCSI      `protobuf:"bytes,5,opt,name=iscsi,proto3" json:"iscsi,omitempty"`
	Options              []string    `protobuf:"bytes,6,rep,name=options,proto3" json:"options,omitempty"`
	Loader               *Bootloader `protobuf:"bytes,7,opt,name=loader,proto3" json:"loader,omitempty"`
	XXX_NoUnkeyedLiteral struct{}    `json:"-"`
	XXX_unrecognized     []byte      `json:"-"`
	XXX_sizecache        int32       `json:"-"`
}

func (m *RegisterRequest) Reset()      { *m = RegisterRequest{} }
func (*RegisterRequest) ProtoMessage() {}
func (*RegisterRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_bae81a51a4b0840a, []int{2}
}
func (m *RegisterRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *RegisterRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_RegisterRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalTo(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *RegisterRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_RegisterRequest.Merge(m, src)
}
func (m *RegisterRequest) XXX_Size() int {
	return m.Size()
}
func (m *RegisterRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_RegisterRequest.DiscardUnknown(m)
}

var xxx_messageInfo_RegisterRequest proto.InternalMessageInfo

type RemoveRequest struct {
	Mac                  string   `protobuf:"bytes,1,opt,name=mac,proto3" json:"mac,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *RemoveRequest) Reset()      { *m = RemoveRequest{} }
func (*RemoveRequest) ProtoMessage() {}
func (*RemoveRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_bae81a51a4b0840a, []int{3}
}
func (m *RemoveRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *RemoveRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_RemoveRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalTo(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *RemoveRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_RemoveRequest.Merge(m, src)
}
func (m *RemoveRequest) XXX_Size() int {
	return m.Size()
}
func (m *RemoveRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_RemoveRequest.DiscardUnknown(m)
}

var xxx_messageInfo_RemoveRequest proto.InternalMessageInfo

type Bootloader struct {
	ID                   string   `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"`
	KernelVersion        string   `protobuf:"bytes,2,opt,name=kernel_version,json=kernelVersion,proto3" json:"kernel_version,omitempty"`
	Image                string   `protobuf:"bytes,3,opt,name=image,proto3" json:"image,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *Bootloader) Reset()      { *m = Bootloader{} }
func (*Bootloader) ProtoMessage() {}
func (*Bootloader) Descriptor() ([]byte, []int) {
	return fileDescriptor_bae81a51a4b0840a, []int{4}
}
func (m *Bootloader) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *Bootloader) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_Bootloader.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalTo(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *Bootloader) XXX_Merge(src proto.Message) {
	xxx_messageInfo_Bootloader.Merge(m, src)
}
func (m *Bootloader) XXX_Size() int {
	return m.Size()
}
func (m *Bootloader) XXX_DiscardUnknown() {
	xxx_messageInfo_Bootloader.DiscardUnknown(m)
}

var xxx_messageInfo_Bootloader proto.InternalMessageInfo

type ISCSI struct {
	InitiatorIqn         string   `protobuf:"bytes,1,opt,name=initiator_iqn,json=initiatorIqn,proto3" json:"initiator_iqn,omitempty"`
	TargetIqn            string   `protobuf:"bytes,2,opt,name=target_iqn,json=targetIqn,proto3" json:"target_iqn,omitempty"`
	TargetIp             string   `protobuf:"bytes,3,opt,name=target_ip,json=targetIp,proto3" json:"target_ip,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *ISCSI) Reset()      { *m = ISCSI{} }
func (*ISCSI) ProtoMessage() {}
func (*ISCSI) Descriptor() ([]byte, []int) {
	return fileDescriptor_bae81a51a4b0840a, []int{5}
}
func (m *ISCSI) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *ISCSI) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_ISCSI.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalTo(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *ISCSI) XXX_Merge(src proto.Message) {
	xxx_messageInfo_ISCSI.Merge(m, src)
}
func (m *ISCSI) XXX_Size() int {
	return m.Size()
}
func (m *ISCSI) XXX_DiscardUnknown() {
	xxx_messageInfo_ISCSI.DiscardUnknown(m)
}

var xxx_messageInfo_ISCSI proto.InternalMessageInfo

func init() {
	proto.RegisterType((*InstallRequest)(nil), "io.stellarproject.pxe.v1.InstallRequest")
	proto.RegisterType((*ListResponse)(nil), "io.stellarproject.pxe.v1.ListResponse")
	proto.RegisterType((*RegisterRequest)(nil), "io.stellarproject.pxe.v1.RegisterRequest")
	proto.RegisterType((*RemoveRequest)(nil), "io.stellarproject.pxe.v1.RemoveRequest")
	proto.RegisterType((*Bootloader)(nil), "io.stellarproject.pxe.v1.Bootloader")
	proto.RegisterType((*ISCSI)(nil), "io.stellarproject.pxe.v1.ISCSI")
}

func init() {
	proto.RegisterFile("github.com/stellarproject/terraos/api/pxe/v1/pxe.proto", fileDescriptor_bae81a51a4b0840a)
}

var fileDescriptor_bae81a51a4b0840a = []byte{
	// 558 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0x94, 0x54, 0xcb, 0x6e, 0xd3, 0x4c,
	0x14, 0xae, 0x9d, 0xfb, 0x69, 0x93, 0xff, 0xd7, 0xa8, 0xaa, 0xac, 0x54, 0xb8, 0xc1, 0xdc, 0xc2,
	0xc6, 0x56, 0x8a, 0x60, 0x03, 0xab, 0x40, 0x2b, 0x59, 0x80, 0x84, 0x5c, 0xa9, 0xaa, 0xd8, 0x54,
	0x93, 0x64, 0xea, 0x0c, 0x38, 0x9e, 0xc9, 0xcc, 0x24, 0x82, 0x1d, 0x0f, 0xc5, 0x43, 0x74, 0xc9,
	0x92, 0x15, 0xa2, 0x59, 0xf2, 0x14, 0x68, 0x3c, 0x76, 0x49, 0x90, 0x5c, 0xd1, 0x95, 0xcf, 0xf9,
	0xbe, 0x73, 0x9f, 0x4f, 0x86, 0x67, 0x31, 0x55, 0xd3, 0xc5, 0xc8, 0x1f, 0xb3, 0x59, 0x20, 0x15,
	0x49, 0x12, 0x2c, 0xb8, 0x60, 0x1f, 0xc8, 0x58, 0x05, 0x8a, 0x08, 0x81, 0x99, 0x0c, 0x30, 0xa7,
	0x01, 0xff, 0x44, 0x82, 0xe5, 0x40, 0x7f, 0x7c, 0x2e, 0x98, 0x62, 0xc8, 0xa1, 0xcc, 0xdf, 0x8c,
	0xf7, 0x35, 0xb9, 0x1c, 0x74, 0x77, 0x63, 0x16, 0xb3, 0x2c, 0x28, 0xd0, 0x96, 0x89, 0xef, 0xee,
	0xc7, 0x8c, 0xc5, 0x09, 0x09, 0x32, 0x6f, 0xb4, 0xb8, 0x08, 0xc8, 0x8c, 0xab, 0xcf, 0x86, 0xf4,
	0xa6, 0xd0, 0x09, 0x53, 0xa9, 0x70, 0x92, 0x44, 0x64, 0xbe, 0x20, 0x52, 0xa1, 0x17, 0x50, 0x4f,
	0x18, 0x9e, 0x10, 0xe1, 0x58, 0x3d, 0xab, 0xbf, 0x7d, 0x78, 0xdf, 0x2f, 0xeb, 0xe7, 0x0f, 0x19,
	0x53, 0x26, 0x36, 0xca, 0x73, 0x90, 0x03, 0x8d, 0x09, 0xb9, 0xc0, 0x8b, 0x44, 0x39, 0x76, 0xcf,
	0xea, 0x37, 0xa3, 0xc2, 0xf5, 0x4e, 0x61, 0xe7, 0x0d, 0x95, 0x2a, 0x22, 0x92, 0xb3, 0x54, 0x12,
	0x74, 0x0c, 0xdb, 0xa3, 0xeb, 0x7c, 0xe9, 0x58, 0xbd, 0xca, 0x3f, 0x37, 0x5b, 0x4f, 0xf4, 0x7e,
	0x59, 0xf0, 0x5f, 0x44, 0x62, 0x2a, 0x15, 0x11, 0xc5, 0x0e, 0xff, 0x43, 0x65, 0x86, 0xc7, 0xd9,
	0x02, 0xad, 0x48, 0x9b, 0xa8, 0x03, 0x36, 0xe5, 0xd9, 0x48, 0xad, 0xc8, 0xa6, 0x1c, 0x21, 0xa8,
	0x0a, 0xc6, 0x94, 0x53, 0xc9, 0x90, 0xcc, 0xd6, 0x98, 0x2e, 0xec, 0x54, 0x0d, 0xa6, 0x6d, 0xf4,
	0x14, 0x6a, 0x54, 0x8e, 0x25, 0x75, 0x6a, 0xd9, 0x31, 0x0e, 0xca, 0xe7, 0x0b, 0x4f, 0x5e, 0x9e,
	0x84, 0x91, 0x89, 0xd6, 0x67, 0x60, 0x5c, 0x51, 0x96, 0x4a, 0xa7, 0xde, 0xab, 0xf4, 0x5b, 0x51,
	0xe1, 0xae, 0x9d, 0xb7, 0x71, 0xfb, 0xf3, 0x7a, 0x77, 0xa1, 0x1d, 0x91, 0x19, 0x5b, 0x92, 0xd2,
	0x4d, 0x3d, 0x0c, 0xf0, 0x27, 0x11, 0xed, 0x81, 0x4d, 0x27, 0x86, 0x1e, 0xd6, 0x57, 0x3f, 0x0e,
	0xec, 0xf0, 0x55, 0x64, 0xd3, 0x09, 0x7a, 0x00, 0x9d, 0x8f, 0x44, 0xa4, 0x24, 0x39, 0x5f, 0x12,
	0x21, 0x29, 0x4b, 0xf3, 0xdb, 0xb4, 0x0d, 0x7a, 0x6a, 0x40, 0xb4, 0x0b, 0x35, 0x3a, 0xc3, 0x31,
	0xc9, 0xef, 0x64, 0x1c, 0x6f, 0x0a, 0xb5, 0x6c, 0x5b, 0x74, 0x0f, 0xda, 0x34, 0xa5, 0x8a, 0x62,
	0xc5, 0xc4, 0x39, 0x9d, 0xa7, 0xf9, 0x1c, 0x3b, 0xd7, 0x60, 0x38, 0x4f, 0xd1, 0x1d, 0x00, 0x85,
	0x45, 0x4c, 0x54, 0x16, 0x61, 0xda, 0xb4, 0x0c, 0xa2, 0xe9, 0x7d, 0x68, 0x15, 0x34, 0xcf, 0xdb,
	0x34, 0x73, 0x96, 0x1f, 0x7e, 0xb5, 0xa1, 0xf2, 0xee, 0xec, 0x08, 0xbd, 0x86, 0x46, 0x2e, 0x53,
	0xd4, 0xbf, 0xe1, 0x09, 0x36, 0x94, 0xdc, 0xdd, 0xf3, 0x8d, 0xf2, 0xfd, 0x42, 0xf9, 0xfe, 0x91,
	0x56, 0x3e, 0x3a, 0x86, 0xaa, 0x56, 0x22, 0x2a, 0xe1, 0xbb, 0x0f, 0xcb, 0x3b, 0x6c, 0x28, 0xf8,
	0x2d, 0x34, 0x0b, 0xe1, 0xa1, 0xc7, 0xe5, 0x39, 0x7f, 0x89, 0xb3, 0x74, 0xac, 0x10, 0xea, 0xe6,
	0x6d, 0xd1, 0xa3, 0x9b, 0x8a, 0xad, 0xbd, 0x7e, 0x59, 0xa9, 0x61, 0x78, 0x79, 0xe5, 0x6e, 0x7d,
	0xbf, 0x72, 0xb7, 0xbe, 0xac, 0x5c, 0xeb, 0x72, 0xe5, 0x5a, 0xdf, 0x56, 0xae, 0xf5, 0x73, 0xe5,
	0x5a, 0xef, 0x83, 0xdb, 0xfc, 0x74, 0x9e, 0x2f, 0x07, 0x67, 0x5b, 0xa3, 0x7a, 0x56, 0xfc, 0xc9,
	0xef, 0x00, 0x00, 0x00, 0xff, 0xff, 0x19, 0x68, 0x08, 0xc5, 0xb0, 0x04, 0x00, 0x00,
}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConn

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion4

// PXEClient is the client API for PXE service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://godoc.org/google.golang.org/grpc#ClientConn.NewStream.
type PXEClient interface {
	Install(ctx context.Context, in *InstallRequest, opts ...grpc.CallOption) (*types.Empty, error)
	List(ctx context.Context, in *types.Empty, opts ...grpc.CallOption) (*ListResponse, error)
	Register(ctx context.Context, in *RegisterRequest, opts ...grpc.CallOption) (*types.Empty, error)
	Remove(ctx context.Context, in *RemoveRequest, opts ...grpc.CallOption) (*types.Empty, error)
}

type pXEClient struct {
	cc *grpc.ClientConn
}

func NewPXEClient(cc *grpc.ClientConn) PXEClient {
	return &pXEClient{cc}
}

func (c *pXEClient) Install(ctx context.Context, in *InstallRequest, opts ...grpc.CallOption) (*types.Empty, error) {
	out := new(types.Empty)
	err := c.cc.Invoke(ctx, "/io.stellarproject.pxe.v1.PXE/Install", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *pXEClient) List(ctx context.Context, in *types.Empty, opts ...grpc.CallOption) (*ListResponse, error) {
	out := new(ListResponse)
	err := c.cc.Invoke(ctx, "/io.stellarproject.pxe.v1.PXE/List", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *pXEClient) Register(ctx context.Context, in *RegisterRequest, opts ...grpc.CallOption) (*types.Empty, error) {
	out := new(types.Empty)
	err := c.cc.Invoke(ctx, "/io.stellarproject.pxe.v1.PXE/Register", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *pXEClient) Remove(ctx context.Context, in *RemoveRequest, opts ...grpc.CallOption) (*types.Empty, error) {
	out := new(types.Empty)
	err := c.cc.Invoke(ctx, "/io.stellarproject.pxe.v1.PXE/Remove", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// PXEServer is the server API for PXE service.
type PXEServer interface {
	Install(context.Context, *InstallRequest) (*types.Empty, error)
	List(context.Context, *types.Empty) (*ListResponse, error)
	Register(context.Context, *RegisterRequest) (*types.Empty, error)
	Remove(context.Context, *RemoveRequest) (*types.Empty, error)
}

func RegisterPXEServer(s *grpc.Server, srv PXEServer) {
	s.RegisterService(&_PXE_serviceDesc, srv)
}

func _PXE_Install_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(InstallRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PXEServer).Install(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/io.stellarproject.pxe.v1.PXE/Install",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PXEServer).Install(ctx, req.(*InstallRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _PXE_List_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(types.Empty)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PXEServer).List(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/io.stellarproject.pxe.v1.PXE/List",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PXEServer).List(ctx, req.(*types.Empty))
	}
	return interceptor(ctx, in, info, handler)
}

func _PXE_Register_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(RegisterRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PXEServer).Register(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/io.stellarproject.pxe.v1.PXE/Register",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PXEServer).Register(ctx, req.(*RegisterRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _PXE_Remove_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(RemoveRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PXEServer).Remove(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/io.stellarproject.pxe.v1.PXE/Remove",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PXEServer).Remove(ctx, req.(*RemoveRequest))
	}
	return interceptor(ctx, in, info, handler)
}

var _PXE_serviceDesc = grpc.ServiceDesc{
	ServiceName: "io.stellarproject.pxe.v1.PXE",
	HandlerType: (*PXEServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "Install",
			Handler:    _PXE_Install_Handler,
		},
		{
			MethodName: "List",
			Handler:    _PXE_List_Handler,
		},
		{
			MethodName: "Register",
			Handler:    _PXE_Register_Handler,
		},
		{
			MethodName: "Remove",
			Handler:    _PXE_Remove_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "github.com/stellarproject/terraos/api/pxe/v1/pxe.proto",
}

func (m *InstallRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *InstallRequest) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.Loader != nil {
		dAtA[i] = 0xa
		i++
		i = encodeVarintPxe(dAtA, i, uint64(m.Loader.Size()))
		n1, err := m.Loader.MarshalTo(dAtA[i:])
		if err != nil {
			return 0, err
		}
		i += n1
	}
	if m.Default {
		dAtA[i] = 0x10
		i++
		if m.Default {
			dAtA[i] = 1
		} else {
			dAtA[i] = 0
		}
		i++
	}
	if m.XXX_unrecognized != nil {
		i += copy(dAtA[i:], m.XXX_unrecognized)
	}
	return i, nil
}

func (m *ListResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *ListResponse) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if len(m.Bootloaders) > 0 {
		for _, msg := range m.Bootloaders {
			dAtA[i] = 0xa
			i++
			i = encodeVarintPxe(dAtA, i, uint64(msg.Size()))
			n, err := msg.MarshalTo(dAtA[i:])
			if err != nil {
				return 0, err
			}
			i += n
		}
	}
	if m.XXX_unrecognized != nil {
		i += copy(dAtA[i:], m.XXX_unrecognized)
	}
	return i, nil
}

func (m *RegisterRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *RegisterRequest) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if len(m.Mac) > 0 {
		dAtA[i] = 0xa
		i++
		i = encodeVarintPxe(dAtA, i, uint64(len(m.Mac)))
		i += copy(dAtA[i:], m.Mac)
	}
	if len(m.Ip) > 0 {
		dAtA[i] = 0x12
		i++
		i = encodeVarintPxe(dAtA, i, uint64(len(m.Ip)))
		i += copy(dAtA[i:], m.Ip)
	}
	if len(m.Root) > 0 {
		dAtA[i] = 0x1a
		i++
		i = encodeVarintPxe(dAtA, i, uint64(len(m.Root)))
		i += copy(dAtA[i:], m.Root)
	}
	if len(m.Boot) > 0 {
		dAtA[i] = 0x22
		i++
		i = encodeVarintPxe(dAtA, i, uint64(len(m.Boot)))
		i += copy(dAtA[i:], m.Boot)
	}
	if m.Iscsi != nil {
		dAtA[i] = 0x2a
		i++
		i = encodeVarintPxe(dAtA, i, uint64(m.Iscsi.Size()))
		n2, err := m.Iscsi.MarshalTo(dAtA[i:])
		if err != nil {
			return 0, err
		}
		i += n2
	}
	if len(m.Options) > 0 {
		for _, s := range m.Options {
			dAtA[i] = 0x32
			i++
			l = len(s)
			for l >= 1<<7 {
				dAtA[i] = uint8(uint64(l)&0x7f | 0x80)
				l >>= 7
				i++
			}
			dAtA[i] = uint8(l)
			i++
			i += copy(dAtA[i:], s)
		}
	}
	if m.Loader != nil {
		dAtA[i] = 0x3a
		i++
		i = encodeVarintPxe(dAtA, i, uint64(m.Loader.Size()))
		n3, err := m.Loader.MarshalTo(dAtA[i:])
		if err != nil {
			return 0, err
		}
		i += n3
	}
	if m.XXX_unrecognized != nil {
		i += copy(dAtA[i:], m.XXX_unrecognized)
	}
	return i, nil
}

func (m *RemoveRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *RemoveRequest) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if len(m.Mac) > 0 {
		dAtA[i] = 0xa
		i++
		i = encodeVarintPxe(dAtA, i, uint64(len(m.Mac)))
		i += copy(dAtA[i:], m.Mac)
	}
	if m.XXX_unrecognized != nil {
		i += copy(dAtA[i:], m.XXX_unrecognized)
	}
	return i, nil
}

func (m *Bootloader) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *Bootloader) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if len(m.ID) > 0 {
		dAtA[i] = 0xa
		i++
		i = encodeVarintPxe(dAtA, i, uint64(len(m.ID)))
		i += copy(dAtA[i:], m.ID)
	}
	if len(m.KernelVersion) > 0 {
		dAtA[i] = 0x12
		i++
		i = encodeVarintPxe(dAtA, i, uint64(len(m.KernelVersion)))
		i += copy(dAtA[i:], m.KernelVersion)
	}
	if len(m.Image) > 0 {
		dAtA[i] = 0x1a
		i++
		i = encodeVarintPxe(dAtA, i, uint64(len(m.Image)))
		i += copy(dAtA[i:], m.Image)
	}
	if m.XXX_unrecognized != nil {
		i += copy(dAtA[i:], m.XXX_unrecognized)
	}
	return i, nil
}

func (m *ISCSI) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *ISCSI) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if len(m.InitiatorIqn) > 0 {
		dAtA[i] = 0xa
		i++
		i = encodeVarintPxe(dAtA, i, uint64(len(m.InitiatorIqn)))
		i += copy(dAtA[i:], m.InitiatorIqn)
	}
	if len(m.TargetIqn) > 0 {
		dAtA[i] = 0x12
		i++
		i = encodeVarintPxe(dAtA, i, uint64(len(m.TargetIqn)))
		i += copy(dAtA[i:], m.TargetIqn)
	}
	if len(m.TargetIp) > 0 {
		dAtA[i] = 0x1a
		i++
		i = encodeVarintPxe(dAtA, i, uint64(len(m.TargetIp)))
		i += copy(dAtA[i:], m.TargetIp)
	}
	if m.XXX_unrecognized != nil {
		i += copy(dAtA[i:], m.XXX_unrecognized)
	}
	return i, nil
}

func encodeVarintPxe(dAtA []byte, offset int, v uint64) int {
	for v >= 1<<7 {
		dAtA[offset] = uint8(v&0x7f | 0x80)
		v >>= 7
		offset++
	}
	dAtA[offset] = uint8(v)
	return offset + 1
}
func (m *InstallRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Loader != nil {
		l = m.Loader.Size()
		n += 1 + l + sovPxe(uint64(l))
	}
	if m.Default {
		n += 2
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *ListResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if len(m.Bootloaders) > 0 {
		for _, e := range m.Bootloaders {
			l = e.Size()
			n += 1 + l + sovPxe(uint64(l))
		}
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *RegisterRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.Mac)
	if l > 0 {
		n += 1 + l + sovPxe(uint64(l))
	}
	l = len(m.Ip)
	if l > 0 {
		n += 1 + l + sovPxe(uint64(l))
	}
	l = len(m.Root)
	if l > 0 {
		n += 1 + l + sovPxe(uint64(l))
	}
	l = len(m.Boot)
	if l > 0 {
		n += 1 + l + sovPxe(uint64(l))
	}
	if m.Iscsi != nil {
		l = m.Iscsi.Size()
		n += 1 + l + sovPxe(uint64(l))
	}
	if len(m.Options) > 0 {
		for _, s := range m.Options {
			l = len(s)
			n += 1 + l + sovPxe(uint64(l))
		}
	}
	if m.Loader != nil {
		l = m.Loader.Size()
		n += 1 + l + sovPxe(uint64(l))
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *RemoveRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.Mac)
	if l > 0 {
		n += 1 + l + sovPxe(uint64(l))
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *Bootloader) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.ID)
	if l > 0 {
		n += 1 + l + sovPxe(uint64(l))
	}
	l = len(m.KernelVersion)
	if l > 0 {
		n += 1 + l + sovPxe(uint64(l))
	}
	l = len(m.Image)
	if l > 0 {
		n += 1 + l + sovPxe(uint64(l))
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *ISCSI) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.InitiatorIqn)
	if l > 0 {
		n += 1 + l + sovPxe(uint64(l))
	}
	l = len(m.TargetIqn)
	if l > 0 {
		n += 1 + l + sovPxe(uint64(l))
	}
	l = len(m.TargetIp)
	if l > 0 {
		n += 1 + l + sovPxe(uint64(l))
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func sovPxe(x uint64) (n int) {
	for {
		n++
		x >>= 7
		if x == 0 {
			break
		}
	}
	return n
}
func sozPxe(x uint64) (n int) {
	return sovPxe(uint64((x << 1) ^ uint64((int64(x) >> 63))))
}
func (this *InstallRequest) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&InstallRequest{`,
		`Loader:` + strings.Replace(fmt.Sprintf("%v", this.Loader), "Bootloader", "Bootloader", 1) + `,`,
		`Default:` + fmt.Sprintf("%v", this.Default) + `,`,
		`XXX_unrecognized:` + fmt.Sprintf("%v", this.XXX_unrecognized) + `,`,
		`}`,
	}, "")
	return s
}
func (this *ListResponse) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&ListResponse{`,
		`Bootloaders:` + strings.Replace(fmt.Sprintf("%v", this.Bootloaders), "Bootloader", "Bootloader", 1) + `,`,
		`XXX_unrecognized:` + fmt.Sprintf("%v", this.XXX_unrecognized) + `,`,
		`}`,
	}, "")
	return s
}
func (this *RegisterRequest) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&RegisterRequest{`,
		`Mac:` + fmt.Sprintf("%v", this.Mac) + `,`,
		`Ip:` + fmt.Sprintf("%v", this.Ip) + `,`,
		`Root:` + fmt.Sprintf("%v", this.Root) + `,`,
		`Boot:` + fmt.Sprintf("%v", this.Boot) + `,`,
		`Iscsi:` + strings.Replace(fmt.Sprintf("%v", this.Iscsi), "ISCSI", "ISCSI", 1) + `,`,
		`Options:` + fmt.Sprintf("%v", this.Options) + `,`,
		`Loader:` + strings.Replace(fmt.Sprintf("%v", this.Loader), "Bootloader", "Bootloader", 1) + `,`,
		`XXX_unrecognized:` + fmt.Sprintf("%v", this.XXX_unrecognized) + `,`,
		`}`,
	}, "")
	return s
}
func (this *RemoveRequest) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&RemoveRequest{`,
		`Mac:` + fmt.Sprintf("%v", this.Mac) + `,`,
		`XXX_unrecognized:` + fmt.Sprintf("%v", this.XXX_unrecognized) + `,`,
		`}`,
	}, "")
	return s
}
func (this *Bootloader) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&Bootloader{`,
		`ID:` + fmt.Sprintf("%v", this.ID) + `,`,
		`KernelVersion:` + fmt.Sprintf("%v", this.KernelVersion) + `,`,
		`Image:` + fmt.Sprintf("%v", this.Image) + `,`,
		`XXX_unrecognized:` + fmt.Sprintf("%v", this.XXX_unrecognized) + `,`,
		`}`,
	}, "")
	return s
}
func (this *ISCSI) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&ISCSI{`,
		`InitiatorIqn:` + fmt.Sprintf("%v", this.InitiatorIqn) + `,`,
		`TargetIqn:` + fmt.Sprintf("%v", this.TargetIqn) + `,`,
		`TargetIp:` + fmt.Sprintf("%v", this.TargetIp) + `,`,
		`XXX_unrecognized:` + fmt.Sprintf("%v", this.XXX_unrecognized) + `,`,
		`}`,
	}, "")
	return s
}
func valueToStringPxe(v interface{}) string {
	rv := reflect.ValueOf(v)
	if rv.IsNil() {
		return "nil"
	}
	pv := reflect.Indirect(rv).Interface()
	return fmt.Sprintf("*%v", pv)
}
func (m *InstallRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowPxe
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: InstallRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: InstallRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Loader", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPxe
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthPxe
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthPxe
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Loader == nil {
				m.Loader = &Bootloader{}
			}
			if err := m.Loader.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Default", wireType)
			}
			var v int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPxe
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.Default = bool(v != 0)
		default:
			iNdEx = preIndex
			skippy, err := skipPxe(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthPxe
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthPxe
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *ListResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowPxe
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: ListResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: ListResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Bootloaders", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPxe
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthPxe
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthPxe
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Bootloaders = append(m.Bootloaders, &Bootloader{})
			if err := m.Bootloaders[len(m.Bootloaders)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipPxe(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthPxe
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthPxe
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *RegisterRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowPxe
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: RegisterRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: RegisterRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Mac", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPxe
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthPxe
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthPxe
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Mac = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Ip", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPxe
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthPxe
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthPxe
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Ip = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Root", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPxe
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthPxe
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthPxe
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Root = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Boot", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPxe
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthPxe
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthPxe
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Boot = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 5:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Iscsi", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPxe
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthPxe
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthPxe
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Iscsi == nil {
				m.Iscsi = &ISCSI{}
			}
			if err := m.Iscsi.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 6:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Options", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPxe
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthPxe
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthPxe
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Options = append(m.Options, string(dAtA[iNdEx:postIndex]))
			iNdEx = postIndex
		case 7:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Loader", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPxe
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthPxe
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthPxe
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Loader == nil {
				m.Loader = &Bootloader{}
			}
			if err := m.Loader.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipPxe(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthPxe
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthPxe
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *RemoveRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowPxe
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: RemoveRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: RemoveRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Mac", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPxe
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthPxe
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthPxe
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Mac = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipPxe(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthPxe
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthPxe
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *Bootloader) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowPxe
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: Bootloader: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: Bootloader: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ID", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPxe
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthPxe
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthPxe
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.ID = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field KernelVersion", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPxe
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthPxe
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthPxe
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.KernelVersion = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Image", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPxe
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthPxe
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthPxe
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Image = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipPxe(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthPxe
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthPxe
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *ISCSI) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowPxe
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: ISCSI: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: ISCSI: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field InitiatorIqn", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPxe
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthPxe
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthPxe
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.InitiatorIqn = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field TargetIqn", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPxe
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthPxe
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthPxe
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.TargetIqn = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field TargetIp", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPxe
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthPxe
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthPxe
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.TargetIp = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipPxe(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthPxe
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthPxe
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func skipPxe(dAtA []byte) (n int, err error) {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return 0, ErrIntOverflowPxe
			}
			if iNdEx >= l {
				return 0, io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		wireType := int(wire & 0x7)
		switch wireType {
		case 0:
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowPxe
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				iNdEx++
				if dAtA[iNdEx-1] < 0x80 {
					break
				}
			}
			return iNdEx, nil
		case 1:
			iNdEx += 8
			return iNdEx, nil
		case 2:
			var length int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowPxe
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				length |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if length < 0 {
				return 0, ErrInvalidLengthPxe
			}
			iNdEx += length
			if iNdEx < 0 {
				return 0, ErrInvalidLengthPxe
			}
			return iNdEx, nil
		case 3:
			for {
				var innerWire uint64
				var start int = iNdEx
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return 0, ErrIntOverflowPxe
					}
					if iNdEx >= l {
						return 0, io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					innerWire |= (uint64(b) & 0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				innerWireType := int(innerWire & 0x7)
				if innerWireType == 4 {
					break
				}
				next, err := skipPxe(dAtA[start:])
				if err != nil {
					return 0, err
				}
				iNdEx = start + next
				if iNdEx < 0 {
					return 0, ErrInvalidLengthPxe
				}
			}
			return iNdEx, nil
		case 4:
			return iNdEx, nil
		case 5:
			iNdEx += 4
			return iNdEx, nil
		default:
			return 0, fmt.Errorf("proto: illegal wireType %d", wireType)
		}
	}
	panic("unreachable")
}

var (
	ErrInvalidLengthPxe = fmt.Errorf("proto: negative length found during unmarshaling")
	ErrIntOverflowPxe   = fmt.Errorf("proto: integer overflow")
)

// Code generated by protoc-gen-gogo. DO NOT EDIT.
// source: github.com/stellarproject/terraos/api/terra/v1/terra.proto

package v1

import (
	context "context"
	fmt "fmt"
	proto "github.com/gogo/protobuf/proto"
	types "github.com/gogo/protobuf/types"
	v1 "github.com/stellarproject/terraos/api/types/v1"
	grpc "google.golang.org/grpc"
	io "io"
	math "math"
	reflect "reflect"
	strings "strings"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.GoGoProtoPackageIsVersion2 // please upgrade the proto package

type RegisterRequest struct {
	Cpus                 uint32       `protobuf:"varint,1,opt,name=cpus,proto3" json:"cpus,omitempty"`
	Memory               uint64       `protobuf:"varint,2,opt,name=memory,proto3" json:"memory,omitempty"`
	NetworkDevices       []*v1.Netdev `protobuf:"bytes,3,rep,name=network_devices,json=networkDevices,proto3" json:"network_devices,omitempty"`
	XXX_NoUnkeyedLiteral struct{}     `json:"-"`
	XXX_unrecognized     []byte       `json:"-"`
	XXX_sizecache        int32        `json:"-"`
}

func (m *RegisterRequest) Reset()      { *m = RegisterRequest{} }
func (*RegisterRequest) ProtoMessage() {}
func (*RegisterRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_248831375f34279b, []int{0}
}
func (m *RegisterRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *RegisterRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_RegisterRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalTo(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *RegisterRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_RegisterRequest.Merge(m, src)
}
func (m *RegisterRequest) XXX_Size() int {
	return m.Size()
}
func (m *RegisterRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_RegisterRequest.DiscardUnknown(m)
}

var xxx_messageInfo_RegisterRequest proto.InternalMessageInfo

type RegisterResponse struct {
	Machine              *v1.Machine `protobuf:"bytes,1,opt,name=machine,proto3" json:"machine,omitempty"`
	XXX_NoUnkeyedLiteral struct{}    `json:"-"`
	XXX_unrecognized     []byte      `json:"-"`
	XXX_sizecache        int32       `json:"-"`
}

func (m *RegisterResponse) Reset()      { *m = RegisterResponse{} }
func (*RegisterResponse) ProtoMessage() {}
func (*RegisterResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_248831375f34279b, []int{1}
}
func (m *RegisterResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *RegisterResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_RegisterResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalTo(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *RegisterResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_RegisterResponse.Merge(m, src)
}
func (m *RegisterResponse) XXX_Size() int {
	return m.Size()
}
func (m *RegisterResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_RegisterResponse.DiscardUnknown(m)
}

var xxx_messageInfo_RegisterResponse proto.InternalMessageInfo

type MachinesResponse struct {
	Machines             []*v1.Machine `protobuf:"bytes,1,rep,name=machines,proto3" json:"machines,omitempty"`
	XXX_NoUnkeyedLiteral struct{}      `json:"-"`
	XXX_unrecognized     []byte        `json:"-"`
	XXX_sizecache        int32         `json:"-"`
}

func (m *MachinesResponse) Reset()      { *m = MachinesResponse{} }
func (*MachinesResponse) ProtoMessage() {}
func (*MachinesResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_248831375f34279b, []int{2}
}
func (m *MachinesResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *MachinesResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_MachinesResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalTo(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *MachinesResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_MachinesResponse.Merge(m, src)
}
func (m *MachinesResponse) XXX_Size() int {
	return m.Size()
}
func (m *MachinesResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_MachinesResponse.DiscardUnknown(m)
}

var xxx_messageInfo_MachinesResponse proto.InternalMessageInfo

func init() {
	proto.RegisterType((*RegisterRequest)(nil), "io.stellarproject.terra.v1.RegisterRequest")
	proto.RegisterType((*RegisterResponse)(nil), "io.stellarproject.terra.v1.RegisterResponse")
	proto.RegisterType((*MachinesResponse)(nil), "io.stellarproject.terra.v1.MachinesResponse")
}

func init() {
	proto.RegisterFile("github.com/stellarproject/terraos/api/terra/v1/terra.proto", fileDescriptor_248831375f34279b)
}

var fileDescriptor_248831375f34279b = []byte{
	// 407 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0x94, 0x93, 0xcf, 0x8b, 0xd3, 0x40,
	0x14, 0xc7, 0x3b, 0xb6, 0xd6, 0x32, 0x45, 0x5b, 0x06, 0x29, 0x35, 0x42, 0x2c, 0xf1, 0x52, 0x50,
	0x26, 0xa4, 0xde, 0xfc, 0x81, 0x20, 0x7a, 0x2a, 0x8a, 0x46, 0x0f, 0xe2, 0x45, 0xd2, 0xf4, 0x99,
	0x46, 0x9b, 0xcc, 0x38, 0x33, 0x89, 0xf4, 0xe6, 0xd9, 0xbf, 0xca, 0x63, 0x8f, 0x7b, 0xdc, 0xe3,
	0x36, 0x7f, 0xc9, 0x92, 0xcc, 0xa4, 0xcb, 0x86, 0xdd, 0xd2, 0xbd, 0xbd, 0xc9, 0xfb, 0x7e, 0x1e,
	0xdf, 0xf7, 0xf8, 0x06, 0x3f, 0x8f, 0x62, 0xb5, 0xca, 0x16, 0x34, 0x64, 0x89, 0x2b, 0x15, 0xac,
	0xd7, 0x81, 0xe0, 0x82, 0xfd, 0x84, 0x50, 0xb9, 0x0a, 0x84, 0x08, 0x98, 0x74, 0x03, 0x1e, 0xeb,
	0xda, 0xcd, 0x3d, 0x5d, 0x50, 0x2e, 0x98, 0x62, 0xc4, 0x8a, 0x19, 0xbd, 0xcc, 0x50, 0xdd, 0xce,
	0x3d, 0xeb, 0x7e, 0xc4, 0x22, 0x56, 0xc9, 0xdc, 0xb2, 0xd2, 0x84, 0xf5, 0x30, 0x62, 0x2c, 0x5a,
	0x83, 0x5b, 0xbd, 0x16, 0xd9, 0x0f, 0x17, 0x12, 0xae, 0x36, 0xa6, 0xf9, 0xa8, 0xd9, 0x54, 0x71,
	0x02, 0x52, 0x05, 0x09, 0x37, 0x82, 0x07, 0x4d, 0x41, 0x90, 0xd6, 0xec, 0xcb, 0x23, 0xd7, 0xd8,
	0x70, 0x90, 0xe5, 0x1a, 0x49, 0x10, 0xae, 0xe2, 0x14, 0x34, 0xed, 0xfc, 0x43, 0x78, 0xe0, 0x43,
	0x14, 0x4b, 0x05, 0xc2, 0x87, 0xdf, 0x19, 0x48, 0x45, 0x08, 0xee, 0x84, 0x3c, 0x93, 0x63, 0x34,
	0x41, 0xd3, 0xbb, 0x7e, 0x55, 0x93, 0x11, 0xee, 0x26, 0x90, 0x30, 0xb1, 0x19, 0xdf, 0x9a, 0xa0,
	0x69, 0xc7, 0x37, 0x2f, 0x32, 0xc7, 0x83, 0x14, 0xd4, 0x1f, 0x26, 0x7e, 0x7d, 0x5f, 0x42, 0x1e,
	0x87, 0x20, 0xc7, 0xed, 0x49, 0x7b, 0xda, 0x9f, 0x39, 0xf4, 0x8a, 0x13, 0x95, 0x1e, 0x68, 0xee,
	0xd1, 0x0f, 0xa0, 0x96, 0x90, 0xfb, 0xf7, 0x0c, 0xfa, 0x56, 0x93, 0xce, 0x27, 0x3c, 0xbc, 0xf0,
	0x22, 0x39, 0x4b, 0x25, 0x90, 0x57, 0xf8, 0x8e, 0x71, 0x5c, 0xf9, 0xe9, 0xcf, 0x1e, 0x1f, 0x1a,
	0xfc, 0x5e, 0x4b, 0xfd, 0x9a, 0x71, 0x3e, 0xe3, 0xa1, 0xf9, 0x26, 0xf7, 0x23, 0x5f, 0xe3, 0x9e,
	0x69, 0x97, 0x3b, 0xb6, 0x8f, 0x9d, 0xb9, 0x87, 0x66, 0xff, 0x11, 0xbe, 0xfd, 0xa5, 0xbc, 0x2d,
	0x01, 0xdc, 0xab, 0x1d, 0x93, 0x27, 0xf4, 0xfa, 0x50, 0xd0, 0xc6, 0x8d, 0xad, 0xa7, 0xc7, 0x89,
	0x8d, 0xe3, 0x8f, 0xb8, 0x57, 0x6f, 0x41, 0x46, 0x54, 0x67, 0x81, 0xd6, 0x59, 0xa0, 0xef, 0xca,
	0x24, 0x1d, 0x9e, 0xd8, 0xbc, 0xc1, 0x9b, 0xf9, 0x76, 0x67, 0xb7, 0x4e, 0x77, 0x76, 0xeb, 0x6f,
	0x61, 0xa3, 0x6d, 0x61, 0xa3, 0x93, 0xc2, 0x46, 0x67, 0x85, 0x8d, 0xbe, 0x79, 0x37, 0xfb, 0x2d,
	0x5e, 0xe4, 0xde, 0xd7, 0xd6, 0xa2, 0x5b, 0x99, 0x79, 0x76, 0x1e, 0x00, 0x00, 0xff, 0xff, 0xa3,
	0x02, 0x37, 0xe7, 0x54, 0x03, 0x00, 0x00,
}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConn

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion4

// TerraClient is the client API for Terra service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://godoc.org/google.golang.org/grpc#ClientConn.NewStream.
type TerraClient interface {
	// Register a new machine to terra
	Register(ctx context.Context, in *RegisterRequest, opts ...grpc.CallOption) (*RegisterResponse, error)
	// Machines returns all registered machines
	Machines(ctx context.Context, in *types.Empty, opts ...grpc.CallOption) (*MachinesResponse, error)
}

type terraClient struct {
	cc *grpc.ClientConn
}

func NewTerraClient(cc *grpc.ClientConn) TerraClient {
	return &terraClient{cc}
}

func (c *terraClient) Register(ctx context.Context, in *RegisterRequest, opts ...grpc.CallOption) (*RegisterResponse, error) {
	out := new(RegisterResponse)
	err := c.cc.Invoke(ctx, "/io.stellarproject.terra.v1.Terra/Register", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *terraClient) Machines(ctx context.Context, in *types.Empty, opts ...grpc.CallOption) (*MachinesResponse, error) {
	out := new(MachinesResponse)
	err := c.cc.Invoke(ctx, "/io.stellarproject.terra.v1.Terra/Machines", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// TerraServer is the server API for Terra service.
type TerraServer interface {
	// Register a new machine to terra
	Register(context.Context, *RegisterRequest) (*RegisterResponse, error)
	// Machines returns all registered machines
	Machines(context.Context, *types.Empty) (*MachinesResponse, error)
}

func RegisterTerraServer(s *grpc.Server, srv TerraServer) {
	s.RegisterService(&_Terra_serviceDesc, srv)
}

func _Terra_Register_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(RegisterRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(TerraServer).Register(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/io.stellarproject.terra.v1.Terra/Register",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(TerraServer).Register(ctx, req.(*RegisterRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Terra_Machines_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(types.Empty)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(TerraServer).Machines(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/io.stellarproject.terra.v1.Terra/Machines",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(TerraServer).Machines(ctx, req.(*types.Empty))
	}
	return interceptor(ctx, in, info, handler)
}

var _Terra_serviceDesc = grpc.ServiceDesc{
	ServiceName: "io.stellarproject.terra.v1.Terra",
	HandlerType: (*TerraServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "Register",
			Handler:    _Terra_Register_Handler,
		},
		{
			MethodName: "Machines",
			Handler:    _Terra_Machines_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "github.com/stellarproject/terraos/api/terra/v1/terra.proto",
}

func (m *RegisterRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *RegisterRequest) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.Cpus != 0 {
		dAtA[i] = 0x8
		i++
		i = encodeVarintTerra(dAtA, i, uint64(m.Cpus))
	}
	if m.Memory != 0 {
		dAtA[i] = 0x10
		i++
		i = encodeVarintTerra(dAtA, i, uint64(m.Memory))
	}
	if len(m.NetworkDevices) > 0 {
		for _, msg := range m.NetworkDevices {
			dAtA[i] = 0x1a
			i++
			i = encodeVarintTerra(dAtA, i, uint64(msg.Size()))
			n, err := msg.MarshalTo(dAtA[i:])
			if err != nil {
				return 0, err
			}
			i += n
		}
	}
	if m.XXX_unrecognized != nil {
		i += copy(dAtA[i:], m.XXX_unrecognized)
	}
	return i, nil
}

func (m *RegisterResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *RegisterResponse) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.Machine != nil {
		dAtA[i] = 0xa
		i++
		i = encodeVarintTerra(dAtA, i, uint64(m.Machine.Size()))
		n1, err := m.Machine.MarshalTo(dAtA[i:])
		if err != nil {
			return 0, err
		}
		i += n1
	}
	if m.XXX_unrecognized != nil {
		i += copy(dAtA[i:], m.XXX_unrecognized)
	}
	return i, nil
}

func (m *MachinesResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *MachinesResponse) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if len(m.Machines) > 0 {
		for _, msg := range m.Machines {
			dAtA[i] = 0xa
			i++
			i = encodeVarintTerra(dAtA, i, uint64(msg.Size()))
			n, err := msg.MarshalTo(dAtA[i:])
			if err != nil {
				return 0, err
			}
			i += n
		}
	}
	if m.XXX_unrecognized != nil {
		i += copy(dAtA[i:], m.XXX_unrecognized)
	}
	return i, nil
}

func encodeVarintTerra(dAtA []byte, offset int, v uint64) int {
	for v >= 1<<7 {
		dAtA[offset] = uint8(v&0x7f | 0x80)
		v >>= 7
		offset++
	}
	dAtA[offset] = uint8(v)
	return offset + 1
}
func (m *RegisterRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Cpus != 0 {
		n += 1 + sovTerra(uint64(m.Cpus))
	}
	if m.Memory != 0 {
		n += 1 + sovTerra(uint64(m.Memory))
	}
	if len(m.NetworkDevices) > 0 {
		for _, e := range m.NetworkDevices {
			l = e.Size()
			n += 1 + l + sovTerra(uint64(l))
		}
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *RegisterResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Machine != nil {
		l = m.Machine.Size()
		n += 1 + l + sovTerra(uint64(l))
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *MachinesResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if len(m.Machines) > 0 {
		for _, e := range m.Machines {
			l = e.Size()
			n += 1 + l + sovTerra(uint64(l))
		}
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func sovTerra(x uint64) (n int) {
	for {
		n++
		x >>= 7
		if x == 0 {
			break
		}
	}
	return n
}
func sozTerra(x uint64) (n int) {
	return sovTerra(uint64((x << 1) ^ uint64((int64(x) >> 63))))
}
func (this *RegisterRequest) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&RegisterRequest{`,
		`Cpus:` + fmt.Sprintf("%v", this.Cpus) + `,`,
		`Memory:` + fmt.Sprintf("%v", this.Memory) + `,`,
		`NetworkDevices:` + strings.Replace(fmt.Sprintf("%v", this.NetworkDevices), "Netdev", "v1.Netdev", 1) + `,`,
		`XXX_unrecognized:` + fmt.Sprintf("%v", this.XXX_unrecognized) + `,`,
		`}`,
	}, "")
	return s
}
func (this *RegisterResponse) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&RegisterResponse{`,
		`Machine:` + strings.Replace(fmt.Sprintf("%v", this.Machine), "Machine", "v1.Machine", 1) + `,`,
		`XXX_unrecognized:` + fmt.Sprintf("%v", this.XXX_unrecognized) + `,`,
		`}`,
	}, "")
	return s
}
func (this *MachinesResponse) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&MachinesResponse{`,
		`Machines:` + strings.Replace(fmt.Sprintf("%v", this.Machines), "Machine", "v1.Machine", 1) + `,`,
		`XXX_unrecognized:` + fmt.Sprintf("%v", this.XXX_unrecognized) + `,`,
		`}`,
	}, "")
	return s
}
func valueToStringTerra(v interface{}) string {
	rv := reflect.ValueOf(v)
	if rv.IsNil() {
		return "nil"
	}
	pv := reflect.Indirect(rv).Interface()
	return fmt.Sprintf("*%v", pv)
}
func (m *RegisterRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowTerra
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: RegisterRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: RegisterRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Cpus", wireType)
			}
			m.Cpus = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTerra
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Cpus |= uint32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Memory", wireType)
			}
			m.Memory = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTerra
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Memory |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field NetworkDevices", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTerra
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthTerra
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthTerra
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.NetworkDevices = append(m.NetworkDevices, &v1.Netdev{})
			if err := m.NetworkDevices[len(m.NetworkDevices)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipTerra(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthTerra
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthTerra
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *RegisterResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowTerra
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: RegisterResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: RegisterResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Machine", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTerra
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthTerra
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthTerra
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Machine == nil {
				m.Machine = &v1.Machine{}
			}
			if err := m.Machine.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipTerra(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthTerra
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthTerra
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *MachinesResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowTerra
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: MachinesResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: MachinesResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Machines", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTerra
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthTerra
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthTerra
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Machines = append(m.Machines, &v1.Machine{})
			if err := m.Machines[len(m.Machines)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipTerra(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthTerra
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthTerra
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func skipTerra(dAtA []byte) (n int, err error) {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return 0, ErrIntOverflowTerra
			}
			if iNdEx >= l {
				return 0, io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		wireType := int(wire & 0x7)
		switch wireType {
		case 0:
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowTerra
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				iNdEx++
				if dAtA[iNdEx-1] < 0x80 {
					break
				}
			}
			return iNdEx, nil
		case 1:
			iNdEx += 8
			return iNdEx, nil
		case 2:
			var length int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowTerra
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				length |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if length < 0 {
				return 0, ErrInvalidLengthTerra
			}
			iNdEx += length
			if iNdEx < 0 {
				return 0, ErrInvalidLengthTerra
			}
			return iNdEx, nil
		case 3:
			for {
				var innerWire uint64
				var start int = iNdEx
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return 0, ErrIntOverflowTerra
					}
					if iNdEx >= l {
						return 0, io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					innerWire |= (uint64(b) & 0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				innerWireType := int(innerWire & 0x7)
				if innerWireType == 4 {
					break
				}
				next, err := skipTerra(dAtA[start:])
				if err != nil {
					return 0, err
				}
				iNdEx = start + next
				if iNdEx < 0 {
					return 0, ErrInvalidLengthTerra
				}
			}
			return iNdEx, nil
		case 4:
			return iNdEx, nil
		case 5:
			iNdEx += 4
			return iNdEx, nil
		default:
			return 0, fmt.Errorf("proto: illegal wireType %d", wireType)
		}
	}
	panic("unreachable")
}

var (
	ErrInvalidLengthTerra = fmt.Errorf("proto: negative length found during unmarshaling")
	ErrIntOverflowTerra   = fmt.Errorf("proto: integer overflow")
)
